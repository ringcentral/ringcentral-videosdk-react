{"version":3,"file":"QuickStarts.stories.682cc972.js","sources":["../../stories/QuickStarts.stories.mdx"],"sourcesContent":["import { Meta, Story } from '@storybook/addon-docs'\nimport {\n    ActionBar,\n    AudioAction,\n    ChatAction,\n    LeaveAction,\n    LogoIcon,\n    MeetingInfoAction,\n    ParticipantAction,\n    RecordAction,\n    VideoAction,\n    GalleryLayout,\n    GalleryLayoutType,\n} from '../lib'\n\n<Meta title={'Quick Starts'}></Meta>\n\n# Getting Started\n\nThis section explains how to use the RingCentral SDK React Components Library for some common use cases.\n\nBefore getting started, make sure you have followed the [Introduction](./?path=/docs/introduction--page) section.\n\nOnline smaple refers to [https://codesandbox.io/s/video-sdk-react-sample](https://codesandbox.io/s/video-sdk-react-sample-d4sv9v).\n\n## Step 1: Inject rcv instance\n\nTo implement a audio/video communications experience, you need to initialize a `@ringcentral/video-sdk` instance firstly.\nFor example, a simple App to initialize sdk.\n\n```jsx\n// App.jsx\nimport React, { useEffect, useState } from \"react\";\nimport { RcvEngine, EngineEvent, GrantType } from \"@ringcentral/video-sdk\";\nimport StartView from \"./StartView\";\nimport InMeeting from \"./InMeeting\";\n\nimport \"@ringcentral/video-sdk-react/dist/esm/index.css\";\n\nconst config = {\n  clientId: \"xxx\",\n  clientSecret: \"xxx\",\n  jwt: \"xxx\",\n};\n\nexport default function App() {\n  const [rcvEngine, setRcvEngine] = useState<RcvEngine>(null);\n  const [meetingId, setMeetingId] = useState(\"\");\n\n  useEffect(() => {\n    const initSDK = async () => {\n      const { clientId, clientSecret, jwt } = config;\n      const engine = RcvEngine.create({\n        clientId,\n        clientSecret,\n      }) as RcvEngine;\n      // if config jwt, initialize SDK with jwt\n      // else initialize SDK with username&password\n      await engine.authorize({\n        grantType: GrantType.JWT,\n        jwt\n      });\n      engine.on(EngineEvent.MEETING_JOINED, (meetingId, errorCode) => {\n        // do something\n        setMeetingId(meetingId);\n      });\n      engine.on(EngineEvent.MEETING_LEFT, () => {\n        // do something\n        setMeetingId(\"\");\n      });\n      setRcvEngine(engine);\n    };\n\n    initSDK().then();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {meetingId ? (\n        <InMeeting rcvEngine={rcvEngine} />\n      ) : (\n        <StartView rcvEngine={rcvEngine} />\n      )}\n    </div>\n  );\n}\n```\n\n## Step 2: Join or start a meeting by rcvEngine instance.\n\nAll the UI components need meeting datas. So it should start or join a meeting secondly and ensure to complete the meeting controller initialization.\n\n```jsx\n// InMeeting.jsx\nimport React, { FC, useState, useRef } from \"react\";\nimport { RcvEngine } from \"@ringcentral/video-sdk\";\n\ninterface IProps {\n  rcvEngine: RcvEngine;\n}\n\nconst StartView: FC<IProps> = (props) => {\n  const { rcvEngine } = props;\n  const inputMeetingIdRef = useRef(null);\n\n  cconst startMeetingHandler = async () => {\n    try {\n      await rcvEngine.startInstantMeeting();\n    } catch (e) {\n      alert(`Error occurs due to :${e.message}`);\n    }\n  };\n\n  const joinMeetingHandler = async () => {\n    if (!inputMeetingIdRef?.current?.value.trim()) {\n      alert(\"Meeting id can not be empty!\");\n      return;\n    }\n    try {\n      await rcvEngine.joinMeeting(inputMeetingIdRef.current.value);\n    } catch (e) {\n      console.error(\"Error occurs due to\");\n    }\n  };\n\n  return (\n    <div>\n      <input ref={inputMeetingIdRef} />\n      <button onClick={startMeetingHandler}>start meeting</button>\n      <button onClick={joinMeetingHandler}>join meeting</button>\n    </div>\n  );\n};\n\nexport default StartView;\n```\n\n## Step 3: Render UI components\n\nFinnaly, inject the rcvEngine instance into `@ringcentral/video-sdk-react` provider - `RcvEngineProvider`.\nThen you finsh setting up the video meeting.\n\n<div\n    style={{\n        display: 'flex',\n        width: '100%',\n        height: '300px',\n        flexDirection: 'column',\n        boxSizing: 'border-box',\n    }}>\n    <GalleryLayout\n        layout={GalleryLayoutType.gallery}\n        style={{\n            flex: 1,\n        }}\n    />\n    <ActionBar\n        leftActions={[<MeetingInfoAction key={'meeting-info-action'} />]}\n        centerActions={[\n            <AudioAction key={'audio-action'} />,\n            <VideoAction key={'video-action'} />,\n            <ParticipantAction key={'participant-action'} />,\n            <ChatAction key={'chat-action'} />,\n            <RecordAction key={'record-action'} />,\n            <LeaveAction key={'leave-action'} />,\n        ]}\n        rightActions={[<LogoIcon key={'logo-icon'} text=\"demo\" />]}\n    />\n</div>\n\nSources codes of this sample.\n\n```jsx\n// InMeeting.tsx\nimport { RcvEngine } from \"@ringcentral/video-sdk\";\nimport {\n  RcvEngineProvider,\n  ActionBar,\n  AudioAction,\n  ChatAction,\n  LeaveAction,\n  LogoIcon,\n  MeetingInfoAction,\n  ParticipantAction,\n  RecordAction,\n  VideoAction,\n  GalleryLayout,\n  GalleryLayoutType\n} from \"@ringcentral/video-sdk-react\";\n\ninterface IProps {\n  rcvEngine: RcvEngine;\n}\n\nconst InMeeting = ({ rcvEngine }: IProps) => {\n  return (\n      <RcvEngineProvider rcvEngine={rcvEngine}>\n        <GalleryLayout\n          layout={GalleryLayoutType.gallery}\n          style={{\n            flex: 1\n          }}\n        />\n        <ActionBar\n          leftActions={[<MeetingInfoAction key={\"meeting-info-action\"} />]}\n          centerActions={[\n            <AudioAction key={\"audio-action\"} />,\n            <VideoAction key={\"video-action\"} />,\n            <ParticipantAction key={\"participant-action\"} />,\n            <ChatAction key={\"chat-action\"} />,\n            <RecordAction key={\"record-action\"} />,\n            <LeaveAction key={\"leave-action\"} />\n          ]}\n          rightActions={[<LogoIcon key={\"logo-icon\"} text=\"demo\" />]}\n        />\n      </RcvEngineProvider>\n  );\n};\n\nexport default InMeeting;\n```\n"],"names":["layoutProps","MDXLayout","MDXContent","components","props","mdx","_extends","mdxType","Meta","title","parentName","style","display","width","height","flexDirection","boxSizing","GalleryLayout","layout","GalleryLayoutType","gallery","flex","ActionBar","leftActions","MeetingInfoAction","key","centerActions","AudioAction","VideoAction","ParticipantAction","ChatAction","RecordAction","LeaveAction","rightActions","LogoIcon","text","isMDXComponent","__page","Error","parameters","docsOnly","componentMeta","includeStories","mdxStoryNameToKey","docs","page","AddContext","mdxComponentAnnotations","__namedExportsOrder"],"mappings":"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"}